use super::ast::*;
use std::rc::Rc;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+([^/*][^*]*\*+)*/" => {},
  _
}

// comma-separated list of T, can be empty
Comma<T>: Vec<T> = {
  <mut v: (<T> ",")*> <e: T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
}

pub CompUnit: CompUnit = {
  <decl: Decl*> => <>,
}

Decl: Decl = {
  <decl: BlockDecl> => <>,
  <ty: TypeSpec> <decl: FuncDeclarator> => Decl::Func(FuncDecl {
    func_type: ty,
    ident: decl.0,
    params: decl.1,
    body: decl.2,
  }),
}

BlockDecl: Decl = {
  <c: "const"?> <ty: TypeSpec> 
  <list: DeclaratorAndInitializerList> ";" => Decl::Var(DeclaratorAndInitializerList {
    is_const: c.is_some(),
    ty,
    list,
  }),
}

FuncDeclarator: (String, ParamList, Option<Block>) = {
  <Ident> "(" <Comma<Param>> ")" <FuncBody> => (<>),
}

FuncBody: Option<Block> = {
  ";" => None,
  <block: Block> => Some(<>),
}

TypeSpec: TypeSpec = {
  "void" => TypeSpec::Void,
  "int" => TypeSpec::Int,
}

Param: Box<Declarator> = {
  "int" <decl: ParamDeclarator> => <>,
}

Block: Block = {
  "{" <BlockItem*> "}" => <>,
}

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(<>),
  <stmt: Stmt> => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
  <PrimaryStmt> => <>,
  <IfStmt> => <>,
  <IfElseStmt> => <>,
  <WhileStmt> => <>,
}

PrimaryStmt: Stmt = {
  <Block> => Stmt::Block(<>.into()),
  <ExprStmt> => <>,
  <ReturnStmt> => <>,
  "break" ";" => Stmt::Break,
  "continue" ";" => Stmt::Continue,
}

/// 关于“悬垂 Else”问题的说明:
///
/// 按 C++ 标准 (https://eel.is/c++draft/stmt.if#1) 说法：
/// - In the second form of if statement (the one including else), 
///   if the first substatement is also an if statement 
///   then that inner if statement shall contain an else part.
///
/// 即：真分支语句如果是 if 语句，则必须以 else 分支结尾。
/// 下文中，带 -NoShortIf 后缀的语句保证不存在单分支的 if。
/// 最后，IfElseStmt 的真分支使用 -NoShortIf 后缀的语句。

StmtNoShortIf: Stmt = {
  <PrimaryStmt> => <>,
  <IfElseStmtNoShortIf> => <>,
  <WhileStmtNoShortIf> => <>,
}

IfStmt: Stmt = {
  "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::If(
    exp,
    stmt.into(),
    None,
  ),
}

IfElseStmt: Stmt = {
  "if" "(" <exp: Exp> ")" <stmt: StmtNoShortIf> "else" <else_stmt: Stmt> => Stmt::If(
    exp, 
    stmt.into(), 
    Some(else_stmt.into())
  ),
}

IfElseStmtNoShortIf: Stmt = {
  "if" "(" <exp: Exp> ")" <stmt: StmtNoShortIf> "else" <else_stmt: StmtNoShortIf> => Stmt::If(
    exp, 
    stmt.into(), 
    Some(else_stmt.into())
  ),
}

WhileStmt: Stmt = {
  "while" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::While(
    exp,
    stmt.into(),
  ),
}

WhileStmtNoShortIf: Stmt = {
  "while" "(" <exp: Exp> ")" <stmt: StmtNoShortIf> => Stmt::While(
    exp,
    stmt.into(),
  ),
}

ExprStmt: Stmt = {
  <Exp?> ";" => Stmt::Exp(<>),
}

ReturnStmt: Stmt = {
  "return" <Exp?> ";" => Stmt::Return(<>),
}

Exp: Box<Exp> = {
  <AssignExp> => Exp::Assign(<>).into(),
  <Exp> "," <AssignExp> => Exp::Comma(<>).into(),
}

AssignExp: Box<AssignExp> = {
  <LOrExp> => AssignExp::LOr(<>).into(),
  <LOrExp> "=" <AssignExp> => AssignExp::Assign(<>).into(),
}

LOrExp: Box<LOrExp> = {
  <LAndExp> => LOrExp::And(<>).into(),
  <LOrExp> "||" <LAndExp> => LOrExp::Or(<>).into(),
}

LAndExp: Box<LAndExp> = {
  <EqExp> => LAndExp::Eq(<>).into(),
  <LAndExp> "&&" <EqExp> => LAndExp::And(<>).into(),
}

EqExp: Box<EqExp> = {
  <RelExp> => EqExp::Rel(<>).into(),
  <EqExp> <EqOp> <RelExp> => EqExp::Eq(<>).into(),
}

EqOp: EqOp = {
  "==" => EqOp::Equal,
  "!=" => EqOp::NotEqual,
}

RelExp: Box<RelExp> = {
  <AddExp> => RelExp::Add(<>).into(),
  <RelExp> <RelOp> <AddExp> => RelExp::Rel(<>).into(),
}

RelOp: RelOp = {
  "<" => RelOp::Less,
  "<=" => RelOp::LessEqual,
  ">" => RelOp::Greater,
  ">=" => RelOp::GreaterEqual,
}

AddExp: Box<AddExp> = {
  <MulExp> => AddExp::Mul(<>).into(),
  <AddExp> <AddOp> <MulExp> => AddExp::Add(<>).into(),
}

AddOp: AddOp = {
  "+" => AddOp::Plus,
  "-" => AddOp::Minus,
}

MulExp: Box<MulExp> = {
  <UnaryExp> => MulExp::Unary(<>).into(),
  <MulExp> <MulOp> <UnaryExp> => MulExp::Mul(<>).into(),
}

MulOp: MulOp = {
  "*" => MulOp::Multiply,
  "/" => MulOp::Divide,
  "%" => MulOp::Modulo,
}

UnaryExp: Box<UnaryExp> = {
  <PostfixExp> => UnaryExp::Postfix(<>).into(),
  "*" <UnaryExp> => UnaryExp::Deref(<>).into(),
  "&" <UnaryExp> => UnaryExp::Address(<>).into(),
  <UnaryOp> <UnaryExp> => UnaryExp::Op(<>).into(),
}

PostfixExp: Box<PostfixExp> = {
  <PrimaryExp> => PostfixExp::Primary(<>).into(),
  <PostfixExp> "[" <Exp> "]" => PostfixExp::Subscript(<>).into(),
  <Ident> "(" <Comma<AssignExp>> ")" => PostfixExp::Call(<>).into(),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Positive,
  "-" => UnaryOp::Negative,
  "!" => UnaryOp::Not,
}

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Paren(<>.into()),
  <Number> => PrimaryExp::Num(<>),
  <Ident> => PrimaryExp::Ident(<>),
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.into();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
  r"'[ -~]'" => <>.bytes().nth(1).unwrap() as i32,
  r"'\\n'" => '\n' as i32,
}

DeclaratorAndInitializerList: Vec<DeclaratorAndInitializer> = {
  <def: DeclaratorAndInitializer> => vec![<>],
  <mut defs: DeclaratorAndInitializerList> "," <def: DeclaratorAndInitializer> => {
    defs.push(def);
    defs
  },
}

DeclaratorAndInitializer: DeclaratorAndInitializer = {
  <Declarator> <("=" <Initializer>)?> => (<>),
}

Initializer: Rc<Initializer> = {
  <AssignExp> => Initializer::Simple(<>).into(),
  "{" <Comma<Initializer>> "}" => Initializer::Aggregate(<>).into(),
}

Declarator: Box<Declarator> = {
  <Ident> => Declarator::Ident(<>).into(),
  "*" <Declarator> => Declarator::Pointer(<>).into(),
  <NoPtrDeclarator> "[" <Exp> "]" => Declarator::Array(<>).into(),
}

NoPtrDeclarator: Box<Declarator> = {
  <Ident> => Declarator::Ident(<>).into(),
  "(" "*" <Declarator> ")" => Declarator::Pointer(<>).into(),
  <NoPtrDeclarator> "[" <Exp> "]" => Declarator::Array(<>).into(),
}

ParamDeclarator: Box<Declarator> = {
  <Ident> => Declarator::Ident(<>).into(),
  "*" <ParamDeclarator> => Declarator::Pointer(<>).into(),
  <ParamDeclaratorArraySpec> => <>,
}

NoPtrParamDeclarator: Box<Declarator> = {
  <Ident> => Declarator::Ident(<>).into(),
  "(" "*" <ParamDeclarator> ")" => Declarator::Pointer(<>).into(),
  <ParamDeclaratorArraySpec> => <>,
}

ParamDeclaratorArraySpec: Box<Declarator> = {
  <NoPtrParamDeclarator> "[" <Exp> "]" => Declarator::Array(<>).into(),
  <NoPtrParamDeclarator> "[" "]" => Declarator::Pointer(<>).into(),
}
