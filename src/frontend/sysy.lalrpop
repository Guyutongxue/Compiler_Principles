use super::ast::*;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+([^/*][^*]*\*+)*/" => {},
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: BlockItemList> "}" => <>;

BlockItemList: Vec<BlockItem> = {
  "" => vec![],
  <item: BlockItem> => vec![item],
  <list: BlockItemList> <item: BlockItem> => {
    list.into_iter().chain(vec![item]).collect()
  }
}

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(<>),
  <stmt: Stmt> => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(<>),
  "return" <exp: Exp> ";" => Stmt::Return(<>),
}

Exp: Box<LOrExp> = <exp: LOrExp> => exp;

LOrExp: Box<LOrExp> = {
  <exp: LAndExp> => LOrExp::And(<>).into(),
  <lhs: LOrExp> "||" <rhs: LAndExp> => LOrExp::Or(<>).into(),
}

LAndExp: Box<LAndExp> = {
  <exp: EqExp> => LAndExp::Eq(<>).into(),
  <lhs: LAndExp> "&&" <rhs: EqExp> => LAndExp::And(<>).into(),
}

EqExp: Box<EqExp> = {
  <exp: RelExp> => EqExp::Rel(<>).into(),
  <lhs: EqExp> <op: EqOp> <rhs: RelExp> => EqExp::Eq(<>).into(),
}

EqOp: EqOp = {
  "==" => EqOp::Equal,
  "!=" => EqOp::NotEqual,
}

RelExp: Box<RelExp> = {
  <exp: AddExp> => RelExp::Add(<>).into(),
  <lhs: RelExp> <op: RelOp> <rhs: AddExp> => RelExp::Rel(<>).into(),
}

RelOp: RelOp = {
  "<" => RelOp::Less,
  "<=" => RelOp::LessEqual,
  ">" => RelOp::Greater,
  ">=" => RelOp::GreaterEqual,
}

AddExp: Box<AddExp> = {
  <exp: MulExp> => AddExp::Mul(<>).into(),
  <lhs: AddExp> <op: AddOp> <rhs: MulExp> => AddExp::Add(<>).into(),
}

AddOp: AddOp = {
  "+" => AddOp::Plus,
  "-" => AddOp::Minus,
}

MulExp: Box<MulExp> = {
  <exp: UnaryExp> => MulExp::Unary(<>).into(),
  <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> => MulExp::Mul(<>).into(),
}

MulOp: MulOp = {
  "*" => MulOp::Multiply,
  "/" => MulOp::Divide,
  "%" => MulOp::Modulo,
}

UnaryExp: Box<UnaryExp> = {
  <exp: PrimaryExp> => UnaryExp::Primary(exp).into(),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Op(op, exp.into()).into(),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Positive,
  "-" => UnaryOp::Negative,
  "!" => UnaryOp::Not,
}

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Paren(<>.into()),
  <lval: LVal> => PrimaryExp::LVal(<>),
  <num: Number> => PrimaryExp::Num(<>),
}

LVal: LVal = {
  <ident: Ident> => LVal::Ident(<>),
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.into();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Decl: Decl = {
  <decl: ConstDecl> => Decl::Const(decl),
  <decl: VarDecl> => Decl::Var(decl)
}

ConstDecl: ConstDecl = "const" <btype: BType> <defs: ConstDefList> ";" => defs;

VarDecl: VarDecl = <btype: BType> <defs: VarDefList> ";" => defs;

BType: String = "int" => <>.into();

ConstDefList: Vec<ConstDef> = {
  <def: ConstDef> => vec![<>],
  <defs: ConstDefList> "," <def: ConstDef> => {
    defs.into_iter().chain(vec![def]).collect()
  },
}

ConstDef: ConstDef = {
  <ident: Ident> "=" <init_val: Exp> => ConstDef {
    ident: ident,
    init_val: init_val.into(),
  },
}

VarDefList: Vec<VarDef> = {
  <def: VarDef> => vec![<>],
  <defs: VarDefList> "," <def: VarDef> => {
    defs.into_iter().chain(vec![def]).collect()
  },
}

VarDef: VarDef = {
  <ident: Ident> => VarDef { 
    <>,
    init_val: None
  },
  <ident: Ident> "=" <init_val: InitVal> => VarDef {
    ident: ident,
    init_val: Some(init_val.into()),
  },
}

InitVal: InitVal = {
  <exp: Exp> => InitVal::Simple(<>.into()),
}
